/*
Copyright (C) 2011 MoSync AB

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License,
version 2, as published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
MA 02110-1301, USA.
*/

/**
 * @file PhoneGapMessageHandler.h
 * @author Ali Sarrafi
 *
 * Implementation of PhoneGap calls made from JavaScript.
 */

#ifndef PHONEGAP_MESSAGE_HANDLER_H_
#define PHONEGAP_MESSAGE_HANDLER_H_

#include <Wormhole/WebViewMessage.h>
#include <NativeUI/WebView.h>
#include <MAUtil/String.h>
#include "PhoneGapMessage.h"
#include "PhoneGapSensors.h"
#include "PhoneGapFile.h"

/**
 * Class that implements JavaScript calls.
 *
 * The JavaScript side is in file extendedbridge.js.
 */
class PhoneGapMessageHandler:
	public MAUtil::SensorListener,
	public MAUtil::CustomEventListener
{
public:
	/**
	 * Constructor.
	 */
	PhoneGapMessageHandler(NativeUI::WebView* webView);

	/**
	 * Destructor.
	 */
	virtual ~PhoneGapMessageHandler();

	/**
	 * Implementation of standard API exposed to JavaScript.
	 * @return true if message was handled, false if not.
	 */
	bool handleMessage(PhoneGapMessage& message);

	/**
	 * Called whenever sensor data is ready
	 */
	void sensorEvent(MASensor sensorData);

	/**
	 * Initializes PhoneGap by sending the native Ready Message.
	 */
	void initializePhoneGap();

	/**
	 * Handles location events generated by the location API.
	 */
	virtual void customEvent(const MAEvent&);

	/**
	 * General wrapper for phoneGap success callback.
	 * If an operation is successful this function should be called.
	 *
	 * @param data the data that should be passed to the callback function
	 */
	void sendPhoneGapSuccess(const char* data);

	/**
	 * General wrapper for phoneGap error callback.
	 * If an operation is successful this function should be called.
	 *
	 * @param data the data that should be passed to the callback function
	 */
	void sendPhoneGapError(const char* data, MAUtil::String callbackID);

	/**
	 * General wrapper for phoneGap error callback.
	 * If an operation is successful this function should be called.
	 *
	 * @param data the data that should be passed to the callback function
	 */
	void sendConnectionType(MAUtil::String callbackID);

	/**
	 * Hardware Listeners and Hardware Access is initialized in this function.
	 */
	void enableHardware();

	/**
	 * Sends Device's information to PhoneGap's JavaScript Instance
	 *
	 * @param callbackID ID of the PhoneGapCallback to be used
	 */
	void sendDeviceProperties(MAUtil::String callbackID);

private:
	/**
	 * A Pointer to the main webview
	 * Used for communicating with PhoneGap
	 */
	NativeUI::WebView* mWebView;

	/**
	 * PhoneGap sensor API:s message handler.
	 */
	PhoneGapSensors mPhoneGapSensors;

	/**
	 * PhoneGap File API message handler.
	 */
	PhoneGapFile mPhoneGapFile;
};

#endif
