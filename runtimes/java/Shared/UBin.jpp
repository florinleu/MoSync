/* Copyright (C) 2009 Mobile Sorcery AB

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License, version 2, as published by
the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with this program; see the file COPYING.  If not, write to the Free
Software Foundation, 59 Temple Place - Suite 330, Boston, MA
02111-1307, USA.
*/

#ifdef _android
package com.mosync.java.android;

import android.util.Log;
import android.content.res.AssetFileDescriptor;
#endif

#include "helpers.h"

import java.io.*;

final class UBin extends BinaryInterface {

	private final int mOffset, mSize;

#ifdef _JavaME
	private final String mFilename;
	public UBin(final String filename, int offset, int size) {
		mFilename = filename;
#elif defined(_android)
	private Core mCore;
	public UBin(Core core, int offset, int size) {
		mCore = core;
#endif
		mOffset = offset;
		mSize = size;
		if(mSize < 0 || mOffset < 0)
			throw new IllegalArgumentException(IN_FILE_ON_LINE_STRING);
	}
	public final int size() {
		return mSize;
	}
	public final InputStream getInputStream(int offset, int size) throws IOException {
		//DEBUG_ALWAYS("uGIS "+filename+"\n");
#ifdef _JavaME
		InputStream in = GET_RESOURCE(mFilename);
#elif defined(_android)
		InputStream in = new LittleEndianDataInputStream(mCore.mContext.getResources().openRawResource(R.raw.resources));
#endif
		MYASSERT(in != null);
		MYASSERT(size <= mSize);
		offset += mOffset;
		MYASSERT(offset >= 0);
		while(offset > 0) {
			long res = in.skip(offset);
			if(res > offset || res == 0) {
				DEBUG_ALWAYS("skip("+offset+") = "+res+"\n");
				BIG_PHAT_ERROR;
			}
			offset -= res;
		}
		return new LimitedLengthInputStream(in, size);
	}

#ifdef OLD_MEMCPY
	public final OutputStream getOutputStream(int offset) throws IOException {
		BIG_PHAT_ERROR;
	}
#endif
}
