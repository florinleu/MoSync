/* Copyright (C) 2009 Mobile Sorcery AB

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License, version 2, as published by
the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with this program; see the file COPYING.  If not, write to the Free
Software Foundation, 59 Temple Place - Suite 330, Boston, MA
02111-1307, USA.
*/

#ifdef _android
package com.mosync.java.android;
#endif

import java.io.*;

#include "helpers.h"

#ifdef PHONE_RELEASE
#define MarkNotSupportedException IOException
#define NoMarkException IOException
#define BeyondLimitException IOException
#define SkipLongException IOException
#else
#define DEFINE_EXCEPTION_CLASS(name) \
final class name extends IOException \
{ public name(String s) { super(s); } \
public name() {} }

DEFINE_EXCEPTION_CLASS(MarkNotSupportedException);
DEFINE_EXCEPTION_CLASS(NoMarkException);
DEFINE_EXCEPTION_CLASS(BeyondLimitException);
DEFINE_EXCEPTION_CLASS(SkipLongException);
#endif

final class LimitedLengthInputStream extends InputStream {
	private final int length;
	private InputStream stream;
	private int pos;
	private int markedPos = -1;
	private int readLimitPos;

	LimitedLengthInputStream(InputStream in, final int size) {
		stream = in;
		length = size;
		pos = 0;
		if(size < 0)
			throw new IllegalArgumentException(IN_FILE_ON_LINE_STRING);
	}
	public final int available() {
		int a = length - pos;
		MYASSERT(a>=0);
		return a;
	}
	public final void close() throws IOException {
		stream.close();
	}
	public final void mark(int readLimit) {
		if(stream.markSupported() == false) return;
		markedPos = pos;
		readLimitPos = readLimit + pos;
		stream.mark(readLimit);
	}	
	public final void reset() throws IOException {
		if(stream.markSupported() == false) throw new MarkNotSupportedException();
		if(markedPos == -1) throw new NoMarkException();
		else if(pos >= readLimitPos) throw new BeyondLimitException();
		pos = markedPos;
		stream.reset();
	}
	public final boolean markSupported() {
		return stream.markSupported();
	}
	public final int read() throws IOException {
		DEBUG("LimitedLengthInputStream.read()\n");
		if(pos >= length)
			return -1;
		int res = stream.read();
		if(res >= 0)
			pos++;
		return res;
	}
	public final int read(byte[] b) throws IOException {
		return read(b, 0, b.length);
	}
	public final int read(byte[] b, int off, int len) throws IOException {
		DEBUG("LimitedLengthInputStream.read(byte[], "+off+", "+len+")\n");
		int trueLen = MIN(available(), len);
		if(trueLen < 0) {
			return -1;
		}
		int res = stream.read(b, off, trueLen);
		pos += res;
		return res;
	}
	public final long skip(long n) throws IOException {
		DEBUG("LimitedLengthInputStream.skip("+n+")\n");
		long trueN = MIN(available(), n);
		if(trueN < 0)
			throw new SkipLongException();
		long res = stream.skip(trueN);
		pos += res;
		return res;
	}
}	//LimitedLengthInputStream
